name: Rust CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: aarch64-apple-darwin
      max-parallel: 3
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5
      # Install system dependencies per OS for glib/gstreamer and pkg-config
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            libglib2.0-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install pkg-config glib gstreamer gst-plugins-base

      # On Windows leverage GitHub action to install official MSVC GStreamer runtime + devel packages
      - name: Setup GStreamer (Windows)
        if: runner.os == 'Windows'
        uses: marcpabst/setup-gstreamer@v.1.5.3
        with:
          version: '1.26.6'
          arch: x86_64

      - uses: moonrepo/setup-rust@v1
        if: runner.os != 'Windows'
        env:
          # Give cargo-binstall higher GitHub API limits and disable telemetry
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_BINSTALL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_BINSTALL_DISABLE_TELEMETRY: "true"
        with:
          targets: ${{ matrix.target }}
          components: clippy,rustfmt
          bins: cargo-audit,cargo-deny
      - uses: moonrepo/setup-rust@v1
        if: runner.os == 'Windows'
        with:
          targets: ${{ matrix.target }}
          components: clippy,rustfmt
          profile: minimal
      - if: runner.os != 'Windows'
        run: cargo fmt --all --check
      - if: runner.os != 'Windows'
        run: cargo audit
      - if: runner.os != 'Windows'
        run: cargo deny check
      - name: Clippy (non-Windows)
        if: runner.os != 'Windows'
        run: cargo clippy --workspace --target ${{ matrix.target }} -- -W warnings
      - name: Build (non-Windows)
        if: runner.os != 'Windows'
        run: cargo build --workspace --all-features --target ${{ matrix.target }}

      # Verify pkg-config finds GStreamer (Windows)
      - name: Verify pkg-config and libs (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          pkg-config --version
          pkg-config --print-errors --exists glib-2.0 'glib-2.0 >= 2.56' gstreamer-1.0 gstreamer-app-1.0 gstreamer-video-1.0
          "glib:        $(pkg-config --modversion glib-2.0)" | Write-Host
          "gstreamer:   $(pkg-config --modversion gstreamer-1.0)" | Write-Host
          "gst-app:     $(pkg-config --modversion gstreamer-app-1.0)" | Write-Host
          "gst-video:   $(pkg-config --modversion gstreamer-video-1.0)" | Write-Host

      # Run cargo in Windows shell with MinGW toolchain and official GStreamer
      - name: Fmt (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cargo fmt --all --check

      - name: Clippy (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cargo clippy --workspace --target ${{ matrix.target }} -- -W warnings

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: cargo build --workspace --all-features --target ${{ matrix.target }}
  #     - name: Build documentation (TODO)
  #       run: cargo doc --workspace --no-deps --all-features -- -D warnings
